from django.db import models

# Modelo para representar uma coleção
class Colecao(models.Model):
    # Escolhas disponíveis para alguns campos do formulário
    BASISOFRECORDCHOICES = [("PreservedSpecimen","PreservedSpecimen"),("FossilSpecimen","FossilSpecimen"),
                            ("LivingSpecimen","LivingSpecimen"),("MaterialSample","MaterialSample"),("Event","Event"),
                            ("HumanObservation","HumanObservation"),("MachineObservation","MachineObservation"),
                            ("Taxon","Taxon"),("Occurrence","Occurrence"),("MaterialCitation","MaterialCitation")]
    LICENSECHOICES = [("CC","CC"),("CC BY","CC BY"),("CC BY - NC","CC BY - NC")]
    SEXCHOICES = [("","Selecione"),("Fêmea","Fêmea"),("Macho","Macho"),("Hermafrodita","Hermafrodita"),
                  ("Não se aplica","Não se aplica")]
    LIFESTAGECHOICES = [("","Selecione"),("Ovo","Ovo"),("Adulto","Adulto"),("Protonifa","Protoninfa"),
                        ("Deutoninfa","Deutoninfa"),("Larva","Larva"),("Tritoninfa","Tritoninfa")]
    CONTINENTCHOICES = [("América do Sul","América do Sul"),("África","África"),("América Central","América Central"),
                        ("América do Norte","América do Norte"),("Antártica","Antártica"),("Ártico","Ártico"),("Ásia","Ásia"),
                        ("Europa","Europa"),("Oceania","Oceania")]
    TAXONRANKSCHOICES = [("Espécie","Espécie"),("Subgênero","Subgênero"),("Gênero","Gênero"),("Subfamília","Subfamília"),
                        ("Familia","Família"),("Ordem","Ordem"),("Classe","Classe"),("Filo","Filo"),("Reino","Reino")]
    SULNORTECHOICES = [(-1,'S'),(1,'N')]
    LESTEOESTECHOICES = [(-1,'L'),(1,'O')]

    # Record-Level
    datasetName = models.CharField(max_length=107, verbose_name="Nome do conjunto de dados", default="Coleção de Acarologia, Centro de coleções taxonômicas (CCT), da Universidade Federal de Minas Gerais (UFMG)",help_text="",null=True)
    type = models.CharField(max_length=15, verbose_name="Tipo",default="Coleção",help_text="",null=True)
    modified = models.DateField(auto_now=True)
    language = models.CharField(max_length=5,default="pt",verbose_name="Idioma",help_text="",null=True)
    license = models.CharField(max_length=10,choices=LICENSECHOICES,default="CC BY NC",verbose_name="Licença",help_text="",null=True)
    rightsHolder = models.CharField(max_length=43,default="Universidade Federal de Minas Gerais (UFMG)",verbose_name="Titular dos direitos",help_text="",null=True)
    accessRights = models.CharField(max_length=50,blank=True,null=True)
    bibliographicCitation = models.CharField(max_length=50,blank=True,null=True)
    references = models.CharField(max_length=50,blank=True,null=True)
    institutionID = models.CharField(max_length=50, default="",verbose_name="ID da instituição",blank=True,help_text="",null=True)
    collectionID = models.CharField(max_length=50,blank=True,null=True)
    datasetID = models.CharField(max_length=50,blank=True,null=True)
    institutionCode = models.CharField(max_length=10,default="UFMG-CCT",verbose_name="Código da instituição",help_text="",null=True)
    collectionCode = models.CharField(max_length=10,default="UFMG-AC",verbose_name="Código da coleção",help_text="",null=True)
    ownerInstitutionCode = models.CharField(max_length=50,blank=True,null=True)
    basisOfRecord = models.CharField(max_length=18,verbose_name="Natureza do Registro",choices=BASISOFRECORDCHOICES,default="PreservedSpecimen",help_text="",null=True)
    informationWithheld = models.CharField(max_length=50,blank=True,null=True)
    dataGeneralizations = models.CharField(max_length=50,blank=True,null=True)
    dynamicProperties = models.CharField(max_length=50,blank=True,verbose_name="Propriedades dinâmicas",help_text="",null=True)
    fieldNumber = models.CharField(max_length=50,blank=True,null=True)

    # Occurrence
    occurrenceID = models.CharField(max_length=50,default="Br:UFMG-CCT:UFMG-AC:",verbose_name="ID da ocorrência",help_text="",null=True)
    catalogNumber = models.CharField(max_length=50,unique=True,verbose_name="Tombo",help_text="",null=True)
    recordNumber = models.CharField(max_length=50,blank=True,verbose_name="Número do registro",help_text="",null=True)
    recordedBy = models.CharField(max_length=70,blank=True,verbose_name="Registrado por",help_text="",null=True)
    recordedByID = models.CharField(max_length=50,blank=True,null=True)
    individualCount = models.CharField(max_length=20,blank=True,verbose_name="Número de indivíduos",help_text="",null=True)
    organismQuantity = models.CharField(max_length=50,blank=True,null=True)
    organismQuantityType = models.CharField(max_length=50,blank=True,null=True)
    sex = models.CharField(max_length=13,choices=SEXCHOICES,default="Selecione",blank=True,verbose_name="Sexo",help_text="",null=True)
    lifeStage = models.CharField(max_length=15,choices=LIFESTAGECHOICES,blank=True,verbose_name="Etapa de vida",help_text="",null=True)
    reproductiveCondition = models.CharField(max_length=15,blank=True,verbose_name="Condição reprodutiva",help_text="",null=True)
    behavior = models.CharField(max_length=50,blank=True,null=True)
    establishmentMeans = models.CharField(max_length=50,blank=True,null=True)
    degreeOfEstablishment = models.CharField(max_length=50,blank=True,null=True)
    pathway = models.CharField(max_length=50,blank=True,null=True)
    georeferenceVerificationStatus = models.CharField(max_length=50,blank=True,null=True)
    occurrenceStatus = models.CharField(max_length=50,blank=True,null=True)
    preparations = models.CharField(max_length=15,blank=True,verbose_name="Preparações",help_text="",null=True)
    disposition = models.CharField(max_length=15,default="na coleção",blank=True,verbose_name="Disposição",help_text="",null=True)
    associatedMedia = models.URLField(max_length=200,blank=True,verbose_name="Mídia Associada",help_text="",null=True)
    associatedOccurrences = models.CharField(max_length=50,blank=True,null=True)
    associatedReferences = models.TextField(blank=True,verbose_name="Referências associadas",help_text="",null=True)
    associatedSequences = models.TextField(blank=True,verbose_name="Sequência Associada",help_text="",null=True)
    associatedTaxa = models.TextField(default="",blank=True,verbose_name="Táxons associados",help_text="",null=True)
    otherCatalogNumbers = models.CharField(max_length=20,blank=True,verbose_name="Outros números de Tombo",help_text="",null=True)
    occurrenceRemarks = models.TextField(default="",blank=True,verbose_name="Comentários da ocorrência",help_text="",null=True)
    caste = models.CharField(max_length=50,blank=True,null=True)
    vitality = models.CharField(max_length=50,blank=True,null=True)

    # Organism
    organismID = models.CharField(max_length=50,blank=True,null=True)
    organismName = models.CharField(max_length=50,blank=True,null=True)
    organismScope = models.CharField(max_length=50,blank=True,null=True)
    associatedOrganisms = models.CharField(max_length=50,blank=True,null=True)
    previousIdentifications = models.CharField(max_length=50,blank=True,null=True)
    organismRemarks = models.CharField(max_length=50,blank=True,null=True)

    # MaterialSample
    materialSampleID = models.CharField(max_length=50,blank=True,null=True)
    materialEntityID = models.CharField(max_length=50,blank=True,null=True)
    verbatimLabel = models.CharField(max_length=50,blank=True,null=True)
    materialEntityRemarks = models.CharField(max_length=50,blank=True,null=True)

    # Event
    eventID = models.CharField(max_length=50,blank=True,null=True)
    parentEventID = models.CharField(max_length=50,blank=True,null=True)
    eventType = models.CharField(max_length=50,blank=True,null=True)
    eventDate = models.CharField(max_length=50,null=True,blank=True,verbose_name="Data do evento",help_text="")
    eventTime = models.TimeField(null=True,blank=True,verbose_name="Hora do evento",help_text="",editable=True)
    startDayOfYear = models.CharField(max_length=50,blank=True,null=True)
    endDayOfYear = models.CharField(max_length=50,blank=True,null=True)
    year = models.CharField(max_length=50,blank=True,null=True)
    month = models.CharField(max_length=50,blank=True,null=True)
    day = models.CharField(max_length=50,blank=True,null=True)
    verbatimEventDate = models.CharField(max_length=50,blank=True,null=True)
    habitat = models.TextField(default="",blank=True,verbose_name="Habitat",help_text="",null=True)
    samplingProtocol = models.CharField(max_length=50,blank=True,verbose_name="Protocolo da amostra",help_text="",null=True)
    sampleSizeValue = models.CharField(max_length=50,blank=True,null=True)
    sampleSizeUnit = models.CharField(max_length=50,blank=True,null=True)
    samplingEffort = models.CharField(max_length=50,blank=True,verbose_name="Esforço da amostragem",help_text="",null=True)
    fieldNotes = models.CharField(max_length=50,blank=True,null=True)
    eventRemarks = models.TextField(default="",blank=True,verbose_name="Comentários do evento",help_text="",null=True)

    # Location
    locationID = models.CharField(max_length=50,blank=True,null=True)
    higherGeography = models.CharField(max_length=50,blank=True,null=True)
    continent = models.CharField(max_length=22,choices=CONTINENTCHOICES,blank=True,verbose_name="Continente",help_text="",null=True)
    waterBody = models.CharField(max_length=50,blank=True,verbose_name="Corpo d'água",help_text="",null=True)
    islandGroup = models.CharField(max_length=50,blank=True,verbose_name="Arquipélago",help_text="",null=True)
    island = models.CharField(max_length=50,blank=True,verbose_name="Ilha",help_text="",null=True)
    country = models.CharField(max_length=50,blank=True, null=True,verbose_name="País",help_text="")
    countryCode = models.CharField(max_length=3,blank=True,verbose_name="Código do país",help_text="",null=True)
    stateProvince = models.CharField(max_length=50,blank=True,verbose_name="Estado/Província",help_text="",null=True)
    county = models.CharField(max_length=50,blank=True,verbose_name="Município",help_text="",null=True)
    locality = models.CharField(max_length=100,blank=True,verbose_name="Localidade",help_text="",null=True)
    verbatimLocality = models.CharField(max_length=50,blank=True,null=True)
    minimumElevationInMeters = models.IntegerField(null=True,blank=True,verbose_name="Elevação mínima em metros",help_text="")
    maximumElevationInMeters = models.IntegerField(null=True,blank=True,verbose_name="Elevação máxima em metros",help_text="")
    verbatimElevation = models.CharField(max_length=50,blank=True,null=True)
    verticalDatum = models.CharField(max_length=50,blank=True,null=True)
    minimumDepthInMeters = models.IntegerField(null=True,blank=True,verbose_name="Profundidade mínima em metros",help_text="")
    maximumDepthInMeters = models.IntegerField(null=True,blank=True,verbose_name="Profundidade máxima em metros",help_text="")
    verbatimDepth = models.CharField(max_length=50,blank=True,null=True)
    minimumDistanceAboveSurfaceInMeters = models.CharField(max_length=50,blank=True,null=True)
    maximumDistanceAboveSurfaceInMeters = models.CharField(max_length=50,blank=True,null=True)
    locationAccordingTo = models.CharField(max_length=50,blank=True,null=True)
    locationRemarks = models.TextField(default="",blank=True,verbose_name="Comentários da localização",help_text="",null=True)
    municipality = models.CharField(max_length=50,blank=True,verbose_name="Distrito",help_text="",null=True)

    graus = models.PositiveSmallIntegerField(blank=True,null=True,verbose_name="Graus Latitude",help_text="")
    minutos = models.PositiveSmallIntegerField(blank=True,null=True,verbose_name="Minutos Latidude",help_text="")
    segundos = models.FloatField(blank=True, null=True,verbose_name="Segundos Latitude",help_text="")
    Sul_Norte = models.SmallIntegerField(blank=True,null=True,db_column="S/N",choices=SULNORTECHOICES,verbose_name="Sul/Norte",help_text="")
    graus_1 = models.PositiveSmallIntegerField(null=True,blank=True,db_column="graus.1",verbose_name="Graus Longitude",help_text="")
    minutos_1 = models.PositiveSmallIntegerField(null=True,blank=True,db_column="minutos.1",verbose_name="Minutos Longitude",help_text="")
    segundos_1 = models.FloatField(null=True,blank=True,db_column="segundos.1",verbose_name="Segundos Longitude",help_text="")
    w_O = models.SmallIntegerField(null=True,blank=True,choices=LESTEOESTECHOICES,db_column="W/O",verbose_name="Leste/Oeste",help_text="")

    decimalLatitude = models.FloatField(verbose_name="Latitude em decimal",help_text="",null=True,blank=True)
    decimalLongitude = models.FloatField(verbose_name="Longitude em decimal",help_text="",null=True,blank=True)
    geodeticDatum = models.CharField(max_length=80,blank=True,verbose_name="Dado geodésico",help_text="",null=True)
    coordinateUncertaintyInMeters = models.CharField(max_length=50,blank=True,verbose_name="Incerteza na coordenada em metros",help_text="",null=True)
    coordinatePrecision = models.CharField(max_length=50,blank=True,null=True)
    pointRadiusSpatialFit = models.CharField(max_length=50,blank=True,null=True)
    verbatimCoordinates = models.CharField(max_length=50,blank=True,verbose_name="Latitude e Longitude",help_text="",null=True)
    verbatimLatitude = models.CharField(max_length=50,blank=True,verbose_name="Latitude (XX S/N XX' XX\")",help_text="",null=True)
    verbatimLongitude = models.CharField(max_length=50,blank=True,verbose_name="Longitude (XX W/O XX' XX\")",help_text="",null=True)
    verbatimCoordinateSystem = models.CharField(max_length=50,blank=True,null=True)
    verbatimSRS = models.CharField(max_length=50,blank=True,null=True)
    footprintWKT = models.CharField(max_length=50,blank=True,null=True)
    footprintSRS = models.CharField(max_length=50,blank=True,null=True)
    footprintSpatialFit = models.CharField(max_length=50,blank=True,null=True)
    georeferenceBy = models.CharField(max_length=200,blank=True,verbose_name="Georreferenciado por",help_text="",null=True)
    georeferenceDate = models.CharField(max_length=50,verbose_name="Data do georeferenciamento",help_text="",blank=True, null=True)
    georeferenceProtocol = models.TextField(default="",blank=True,verbose_name="Protocolo de georreferenciamento",help_text="",null=True)
    georeferenceSources = models.CharField(max_length=50,blank=True,null=True)
    georeferenceRemarks = models.TextField(blank=True,verbose_name="Comentários do georreferenciamento",help_text="",null=True)

    # GeologicalContext
    geologicalContextID = models.CharField(max_length=50,blank=True,null=True)
    earliestEonOrLowestEonothem = models.CharField(max_length=50,blank=True,null=True)
    latestEonOrHighestEonothem = models.CharField(max_length=50,blank=True,null=True)
    earliestEraOrLowestErathem = models.CharField(max_length=50,blank=True,null=True)
    latestEraOrHighestErathem = models.CharField(max_length=50,blank=True,null=True)
    earliestPeriodOrLowestSystem = models.CharField(max_length=50,blank=True,null=True)
    earliestEpochOrLowestSeries = models.CharField(max_length=50,blank=True,null=True)
    latestEpochOrHighestSeries = models.CharField(max_length=50,blank=True,null=True)
    earliestAgeOrLowestStage = models.CharField(max_length=50,blank=True,null=True)
    latestAgeOrHighestStage = models.CharField(max_length=50,blank=True,null=True)
    lowestBiostratigraphicZone = models.CharField(max_length=50,blank=True,null=True)
    highestBiostratigraphicZone = models.CharField(max_length=50,blank=True,null=True)
    lithostratigraphicTerms = models.CharField(max_length=50,blank=True,null=True)
    group = models.CharField(max_length=50,blank=True,null=True)
    formation = models.CharField(max_length=50,blank=True,null=True)
    member = models.CharField(max_length=50,blank=True,null=True)
    bed = models.CharField(max_length=50,blank=True,null=True)

    # Identification
    identificationID = models.CharField(max_length=50,blank=True,null=True)
    verbatimIdentification = models.CharField(max_length=50,blank=True,null=True)
    identificationQualifier = models.CharField(max_length=50,blank=True,verbose_name="Qualificador da identificação",help_text="",null=True)
    typeStatus = models.CharField(max_length=50,blank=True,verbose_name="Condição do tipo",help_text="",null=True)
    identifiedBy = models.CharField(max_length=200,blank=True,verbose_name="Identificado por",help_text="",null=True)
    identifiedByID = models.CharField(max_length=50,blank=True,null=True)
    dateIdentified = models.CharField(max_length=50,null=True,blank=True,verbose_name="Data da identificação",help_text="")
    identificationReferences = models.CharField(max_length=50,blank=True,null=True)
    identificationVerificationStatus = models.CharField(max_length=50,blank=True,null=True)
    identificationRemarks = models.TextField(blank=True,verbose_name="Comentários da identificação",help_text="",null=True)

    # Taxon
    taxonID = models.CharField(max_length=50,blank=True,null=True)
    scientificNameID = models.CharField(max_length=50,blank=True,null=True)
    acceptedNameUsageID = models.CharField(max_length=50,blank=True,null=True)
    parentNameUsageID = models.CharField(max_length=50,blank=True,null=True)
    originalNameUsageID = models.CharField(max_length=50,blank=True,null=True)
    nameAccordingToID = models.CharField(max_length=50,blank=True,null=True)
    namePublishedInID = models.CharField(max_length=50,blank=True,null=True)
    taxonConceptID = models.CharField(max_length=50,blank=True,null=True)
    scientificName = models.CharField(max_length=50,blank=True,verbose_name="Nome científico",help_text="",null=True)
    acceptedNameUsage = models.CharField(max_length=50,blank=True,null=True)
    parentNameUsage = models.CharField(max_length=50,blank=True,null=True)
    originalNameUsage = models.CharField(max_length=50,blank=True,null=True)
    nameAccordingTo = models.CharField(max_length=50,blank=True,null=True)
    namePublishedIn = models.CharField(max_length=50,blank=True,null=True)
    namePublishedInYear = models.CharField(max_length=50,blank=True,null=True)
    higherClassification = models.CharField(max_length=50,blank=True,null=True)
    kingdom = models.CharField(max_length=50,default="Animalia",blank=True,verbose_name="Reino",help_text="",null=True)
    phylum = models.CharField(max_length=50,default="Arthropoda",blank=True,verbose_name="Filo",help_text="",null=True)
    classe = models.CharField(max_length=50,default="Arachnida",blank=True,db_column="class",verbose_name="Classe",help_text="",null=True)
    order = models.CharField(max_length=50,blank=True,verbose_name="Ordem",help_text="",null=True)
    Coorte = models.CharField(max_length=50,blank=True,verbose_name="Coorte ou Supercoorte",help_text="",null=True)
    superfamily = models.CharField(max_length=50,blank=True,verbose_name="Superfamília",help_text="",null=True)
    family = models.CharField(max_length=50,blank=True,verbose_name="Família",help_text="",null=True)
    subfamily = models.CharField(max_length=50,blank=True,verbose_name="Sub-família",help_text="",null=True)
    tribe = models.CharField(max_length=50,blank=True,null=True)
    subtribe = models.CharField(max_length=50,blank=True,null=True)
    genus = models.CharField(max_length=50,blank=True,verbose_name="Gênero",help_text="",null=True)
    genericName = models.CharField(max_length=50,blank=True,null=True)
    subgenus = models.CharField(max_length=50,blank=True,verbose_name="Sub-gênero",help_text="",null=True)
    infragenericEpithet = models.CharField(max_length=50,blank=True,null=True)
    specificEpithet = models.CharField(max_length=50,blank=True,verbose_name="Epíteto específico",help_text="",null=True)
    infraspecificEpithet = models.CharField(max_length=50,blank=True,verbose_name="Epíteto infraespecífico",help_text="",null=True)
    cultivarEpithet = models.CharField(max_length=50,blank=True,null=True)
    taxonRank = models.CharField(max_length=50,choices=TAXONRANKSCHOICES,blank=True,verbose_name="Nível científico",help_text="",null=True)
    verbatimTaxonRank = models.CharField(max_length=50,blank=True,null=True)
    scientificNameAuthorShip = models.CharField(max_length=100,blank=True,verbose_name="Autoria do nome científico",help_text="",null=True)
    vernacularName = models.CharField(max_length=50,blank=True,verbose_name="Nome comum",help_text="",null=True)
    nomenclaturalCode = models.CharField(max_length=50,blank=True,null=True)
    taxonomicStatus = models.CharField(max_length=50,blank=True,null=True)
    nomenclaturalStatus = models.CharField(max_length=50,blank=True,null=True)
    taxonRemarks = models.TextField(default="",blank=True,verbose_name="Comentário sobre o táxon",help_text="",null=True)

    # MeasurementOrFact
    measurementID = models.CharField(max_length=50,blank=True,null=True)
    parentMeasurementID = models.CharField(max_length=50,blank=True,null=True)
    measurementType = models.CharField(max_length=50,blank=True,null=True)
    measurementValue = models.CharField(max_length=50,blank=True,null=True)
    measurementUnit = models.CharField(max_length=50,blank=True,null=True)
    measurementMethod = models.CharField(max_length=50,blank=True,null=True)
    measurementRemarks = models.CharField(max_length=50,blank=True,null=True)
    measurementAccuracy = models.CharField(max_length=50,blank=True,null=True)
    measurementDeterminedBy = models.CharField(max_length=50,blank=True,null=True)
    measurementDeterminedDate = models.CharField(max_length=50,blank=True,null=True)

    def __str__(self):
        # Retorna uma representação legível para o objeto no admin ou em outros contextos
        return f"{self.catalogNumber}" # Altere conforme necessário